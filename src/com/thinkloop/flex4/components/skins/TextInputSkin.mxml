<?xml version="1.0" encoding="utf-8"?>
<s:SparkSkin xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
			 xmlns:fx="http://ns.adobe.com/mxml/2009"
			 xmlns:s="library://ns.adobe.com/flex/spark" 
			 alpha.disabled="0.5" blendMode="normal">

<!--* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	* * META DATA
	* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *-->

	<fx:Metadata>
		<![CDATA[
        	[HostComponent("spark.components.TextInput")]
		]]>
	</fx:Metadata>

<!--* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	* * PROPERTIES  
	* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *-->
	
	
<!--* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	* * SCRIPT
	* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *-->

	<fx:Script fb:purpose="styling">
		private var paddingChanged:Boolean;

		/* Define the skin elements that should not be colorized. */
		static private const exclusions:Array = ['bg', 'border', 'textDisplay'];
		override public function get colorizeExclusions():Array {
			return exclusions;
		}

		override protected function commitProperties():void {
			super.commitProperties();

			if (paddingChanged) {
				updatePadding();
				paddingChanged = false;
			}
		}

		override protected function initializationComplete():void {
			useChromeColor = true;
			super.initializationComplete();
		}


		private function updatePadding():void {
			if (!textDisplay) {
				return;
			}
			// Push padding styles into the textDisplay
			var padding:Number;
			padding = getStyle("paddingLeft");

			if (textDisplay.getStyle("paddingLeft") != padding) {
				textDisplay.setStyle("paddingLeft", padding);
			}
			padding = getStyle("paddingTop");

			if (textDisplay.getStyle("paddingTop") != padding) {
				textDisplay.setStyle("paddingTop", padding);
			}
			padding = getStyle("paddingRight");

			if (textDisplay.getStyle("paddingRight") != padding) {
				textDisplay.setStyle("paddingRight", padding);
			}
			padding = getStyle("paddingBottom");

			if (textDisplay.getStyle("paddingBottom") != padding) {
				textDisplay.setStyle("paddingBottom", padding);
			}
		}

		override public function styleChanged(styleProp:String):void {
			var allStyles:Boolean = !styleProp || styleProp == "styleName";
			super.styleChanged(styleProp);

			if (allStyles || styleProp.indexOf("padding") == 0) {
				paddingChanged = true;
				invalidateProperties();
			}
		}
	</fx:Script>

<!--* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	* * STATES
	* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *-->

	<s:states>
		<s:State name="normal" />
		<s:State name="disabled" />
	</s:states>

<!--* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	* * VIEW
	* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *-->
	
	<!-- bg -->
	<s:Rect id="bg" top="0" bottom="0" left="0" right="0">
		<s:fill>
			<s:SolidColor id="bgFill" color="{getStyle('contentBackgroundColor')}" color.disabled="{getStyle('disabledColor')}"  />
		</s:fill>
	</s:Rect>

	<!-- border -->
	<s:Rect id="border" top="0" bottom="0" left="0" right="0" visible="{getStyle('borderVisible')}">
		<s:stroke>
			<s:SolidColorStroke id="borderStroke" color="{getStyle('borderColor')}" alpha="{getStyle('borderAlpha')}" />
		</s:stroke>
	</s:Rect>
	
	<!-- text display -->
	<s:RichEditableText id="textDisplay"
						width="100%" height="100%"
						verticalAlign="middle"
						color="{getStyle('color')}" textAlign="left" />
</s:SparkSkin>
