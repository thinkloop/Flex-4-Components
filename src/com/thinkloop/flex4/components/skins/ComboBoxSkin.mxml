<?xml version="1.0" encoding="utf-8"?>
<s:SparkSkin 
	xmlns:fb="http://ns.adobe.com/flashbuilder/2009" 
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	alpha.disabled=".5">

<!--* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	* * META DATA
	* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *-->
	
	<fx:Metadata>
		<![CDATA[ 
        	[HostComponent("spark.components.ComboBox")]
        ]]>
	</fx:Metadata>

<!--* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	* * PROPERTIES  
	* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *-->
	
	<fx:Declarations>
		<fx:String id="finalColor">{getStyle('accentColor')}</fx:String>
		<fx:String id="finalBGColor">{getStyle('contentBackgroundColor')}</fx:String>
		<fx:String id="finalBorderColor">{getStyle('borderColor')}</fx:String>
		
		<fx:int id="fontSize">{getStyle('fontSize')}</fx:int>
		
		<s:Sine id="myEaser" easeInFraction="0.1" />
	</fx:Declarations>
	
<!--* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	* * SCRIPT
	* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *-->
	
	<fx:Script fb:purpose="styling">
		<![CDATA[
			private var paddingChanged:Boolean;

			private var cornerRadiusChanged:Boolean;

			private var cornerRadius:Number = 0;

			/* Define the content fill items that should be colored by the "contentBackgroundColor" style. */
			static private const contentFill:Array = ["bgFill"];

			/**
			 * @private
			 */
			override public function get contentItems():Array
			{
				return contentFill
			}
			;

			/**
			 *  @private
			 */
			override protected function commitProperties():void
			{
				super.commitProperties();

				if (paddingChanged && textInput)
				{
					// Push padding styles into the textDisplay
					var padding:Number;
					padding = getStyle("paddingLeft");

					if (textInput.getStyle("paddingLeft") != padding)
					{
						textInput.setStyle("paddingLeft", padding);
					}
					padding = getStyle("paddingTop");

					if (textInput.getStyle("paddingTop") != padding)
					{
						textInput.setStyle("paddingTop", padding);
					}
					padding = getStyle("paddingRight");

					if (textInput.getStyle("paddingRight") != padding)
					{
						textInput.setStyle("paddingRight", padding);
					}
					padding = getStyle("paddingBottom");

					if (textInput.getStyle("paddingBottom") != padding)
					{
						textInput.setStyle("paddingBottom", padding);
					}
					paddingChanged = false;
				}

				if (cornerRadiusChanged)
				{
					cornerRadiusChanged = false;
					/* var cr:Number = getStyle("cornerRadius");

					   if (openButton)
					   openButton.setStyle("cornerRadius", cr);
					   if (textInput)
					 textInput.setStyle("cornerRadius", cr); */
				}
			}

			/**
			 *  @private
			 */
			override public function styleChanged(styleProp:String):void
			{
				var allStyles:Boolean = !styleProp || styleProp == "styleName";
				super.styleChanged(styleProp);

				if (allStyles || styleProp.indexOf("padding") == 0)
				{
					paddingChanged = true;
					invalidateProperties();
				}

				if (allStyles || styleProp == "cornerRadius")
				{
					cornerRadiusChanged = true;
					invalidateProperties();
				}
			}

			/**
			 * @private
			 */
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				if (getStyle("borderVisible") == false)
				{
					if (border)
					{
						border.visible = false;
					}

					if (background)
					{
						background.left = background.top = background.right = background.bottom = 0;
					}

					if (scroller)
					{
						scroller.minViewportInset = 0;
					}
				}
				else
				{
					if (border)
					{
						border.visible = true;
					}

					if (background)
					{
						background.left = background.top = background.right = background.bottom = 1;
					}

					if (scroller)
					{
						scroller.minViewportInset = 1;
					}
				}

				//openButton.setStyle("cornerRadius", getStyle("cornerRadius"));
				if (borderStroke)
				{
					borderStroke.color = getStyle("borderColor");
					borderStroke.alpha = getStyle("borderAlpha");
				}
				super.updateDisplayList(unscaledWidth, unscaledHeight);
			}
		]]>
	</fx:Script>

<!--* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	* * STATES
	* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *-->
	
	<s:states>
		<s:State name="normal" />
		<s:State name="open" />
		<s:State name="disabled" />
	</s:states>

<!--* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	* * VIEW
	* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *-->
	
	<!---
		 The PopUpAnchor control that opens the drop-down list.

		 <p>In a custom skin class that uses transitions, set the
		 <code>itemDestructionPolicy</code> property to <code>none</code>.</p>
	-->
	<s:PopUpAnchor id="popUp" itemDestructionPolicy="auto"
			top="0" bottom="0" left="0" right="0" 
			displayPopUp.normal="false" displayPopUp.open="true"
			popUpPosition="below" popUpWidthMatchesAnchorWidth="true"
			includeIn="open">

		<!---
			 This includes borders, background colors, scrollers, and filters.
			 @copy spark.components.supportClasses.DropDownListBase#dropDown
		-->
		<s:Group id="dropDown" minHeight="22" maxHeight="134">

			<!-- drop-down border -->
			<s:Rect id="border"	top="0" bottom="0" left="0" right="0">

				<s:stroke>
					<s:SolidColorStroke id="borderStroke" weight="1" />
				</s:stroke>
			</s:Rect>

			<!--- drop-down background -->
			<s:Rect id="background" top="1" bottom="1" left="1" right="1">
				<s:fill>
					<s:SolidColor id="bgFill" color="0xFFFFFF" />
				</s:fill>
			</s:Rect>

			<!--- @private -->
			<s:Scroller id="scroller"
					top="0" bottom="0" left="0" right="0" hasFocusableChildren="false" minViewportInset="1">

				<!--- @copy spark.components.SkinnableDataContainer#dataGroup-->
				<s:DataGroup id="dataGroup" itemRenderer="spark.skins.spark.DefaultItemRenderer">

					<s:layout>

						<s:VerticalLayout horizontalAlign="contentJustify" gap="0" />
					</s:layout>
				</s:DataGroup>
			</s:Scroller>
		</s:Group>
	</s:PopUpAnchor>

	<!---  The default skin is ComboBoxButtonSkin.
		 @copy spark.components.supportClasses.DropDownListBase#openButton
		 @see spark.skins.spark.ComboBoxButtonSkin -->
	<s:Button id="openButton"
			width="19"
			top="0" bottom="0" right="0"
			focusEnabled="false" 
			skinClass="com.thinkloop.flex4.components.skins.ComboBoxButtonSkin" />

<!--
	spark.skins.spark.ComboBoxButtonSkin  
	spark.skins.spark.ComboBoxTextInputSkin
-->
				 
	<!--- @copy spark.components.ComboBox#textInput -->
	<s:TextInput id="textInput"	
				 top="0" bottom="0" left="0" right="18" 
				 skinClass="com.thinkloop.flex4.components.skins.TextInputSkin" />
</s:SparkSkin>
